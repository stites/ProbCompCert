name: ocaml-ubuntu

on: push
#  # Trigger the workflow on push or pull request, but only for the pcp branch
#  # (ie: don't blow up everyone's email when someone is on their own branch)
#  push:
#    branches:
#      - pcp
#  pull_request:
#    branches:
#      - pcp

jobs:
  check-stan-admits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: install ripgrep v13.x.x
        run: |
          sudo apt-get install curl
          curl   -L -o ripgrep.deb https://github.com/BurntSushi/ripgrep/releases/download/13.0.0/ripgrep_13.0.0_amd64.deb
          sudo dpkg -i ripgrep.deb
          rg --version
      - run: ./.bin/find-stan-admits

#  build-simple:
#    strategy:
#      fail-fast: false
#      matrix:
#        os:
#        # - macos-latest # requires changing x86_64-linux, below, to x86_64-macosx
#          - ubuntu-latest
#        ocaml-compiler:
#          - 4.10.2
#
#    runs-on: ${{ matrix.os }}
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#        with:
#          submodules: true # for coq-proba
#
#      - name: Use OCaml ${{ matrix.ocaml-compiler }}
#        uses: ocaml/setup-ocaml@v2
#        with:
#          ocaml-compiler: ${{ matrix.ocaml-compiler }}
#
#      - run: opam repo -y add coq-released https://coq.inria.fr/opam/released
#
#      # dependencies for coq-proba
#      # FIXME: really need to figure out how to fix `opam lock`
#      - run: |
#          opam pin -y add                    num 1.3
#          opam pin -y add                    coq 8.12.0
#          opam pin -y add              coq-stdpp 1.4.0
#          opam pin -y add coq-mathcomp-ssreflect 1.11.0
#          opam pin -y add              coq-flocq 3.3.1
#          opam pin -y add         coq-coquelicot 3.1.0
#          opam pin -y add           coq-interval 4.0.0
#          opam install -y coq-bignums
#
#      # dependencies for compcert
#      - run: |
#          opam pin -y add menhir 20210419
#          opam install -y coq-coq2html
#
#      - run: |
#          eval $(opam env);
#          #./configure -prefix ./out -clightgen x86_64-linux
#          ./configure -clightgen x86_64-linux
#          make -j
#
#      # Simplified way to build a binary without .bin/ccompstan
#      - run: |
#          eval $(opam env);
#
#          # install bin and lib outputs to ./out
#          #make -j install
#          sudo make -j install
#          #export LIBCCOMP_INSTALL=$PWD/out/lib
#
#          cd stanfrontend
#          #echo "LIBCCOMP_INSTALL = $LIBCCOMP_INSTALL"
#
#          # ccomp doesn't compile down to object files, just asm
#          #export CCOMP="../out/bin/ccomp -L$LIBCCOMP_INSTALL"
#          export CCOMP="ccomp -L. -I."
#
#          $CCOMP -c stanlib.c
#          #ld -L$LIBCCOMP_INSTALL -shared stanlib.o -o libstan.so --verbose
#          ld -shared stanlib.o -o libstan.so
#          echo [DONE] libstan.so
#
#          $CCOMP -c tests/simple/simple.stan && $CCOMP -c simple.s
#          echo [DONE] simple.o
#
#          $CCOMP -c Runtime.c
#          echo [DONE] Runtime.o
#
#          $CCOMP -Wl,-rpath=. simple.o Runtime.o -lstan -lm -o runit
#          # tell the user what to do next
#          echo [DONE] compiled! run: ./stanfrontend/runit INT
#
#          export RUNIT_OUTPUT=\"$(./runit)\"
#
#          if [[ -z "$(echo "$(./runit)" | grep error)" ]]; then
#            echo [SUCCESS] ./runit runs with output:
#            echo $RUNIT_OUTPUT
#          else
#            echo [ERROR] ./runit fails at runtime with message:
#            echo $RUNIT_OUTPUT
#            exit 1
#          fi
#
