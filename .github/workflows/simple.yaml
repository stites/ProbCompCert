name: ocaml-ubuntu

on:
  # Trigger the workflow on push or pull request, but only for the pcp branch
  # (ie: don't blow up everyone's email when someone is on their own branch)
  push:
    branches:
      - pcp
      - ci-admits
  pull_request:
    branches:
      - pcp

jobs:
  check-stan-admits:
    name: Show admits in ./stanfrontend (but don't fail)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: install ripgrep v13.x.x
        run: |
          sudo apt-get install curl
          curl   -L -o ripgrep.deb https://github.com/BurntSushi/ripgrep/releases/download/13.0.0/ripgrep_13.0.0_amd64.deb
          sudo dpkg -i ripgrep.deb
          rg --version

        # admits are acceptable in the codebase at this stage of development
      - name: Report admits in ./stanfrontend
        run: ./.bin/find-stan-admits
        continue-on-error: true


  build-simple:
    name: build simple binaries
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        ocaml-compiler:
          - 4.10.2

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true # for coq-proba

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}

      - name: Add Coq repositories
        run: opam repo -y add coq-released https://coq.inria.fr/opam/released

      # FIXME: really need to figure out how to fix `opam lock`
      - name: Install dependencies for coq-proba
        run: |
          opam pin -y add                    num 1.3
          opam pin -y add                    coq 8.12.0
          opam pin -y add              coq-stdpp 1.4.0
          opam pin -y add coq-mathcomp-ssreflect 1.11.0
          opam pin -y add              coq-flocq 3.3.1
          opam pin -y add         coq-coquelicot 3.1.0
          opam pin -y add           coq-interval 4.0.0
          opam install -y coq-bignums

      - name: Install dependencies for CompCert
        run: |
          opam pin -y add menhir 20210419
          opam install -y coq-coq2html

      - name: Configure and build ProbCompCert
        run: |
          eval $(opam env);

          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
              echo "configuring for x86_64-macosx"
              ./configure -clightgen x86_64-macosx
          else
              echo "configuring for x86_64-linux"
              ./configure -clightgen x86_64-linux
              # ./configure -prefix ./out -clightgen x86_64-linux
          fi

          make -j

      - name: Build stanfrontend/tests/simple/simple.stan
        run: |
          eval $(opam env);

          sudo make -j install

          # *_runtime.c and *_prelude.c generation requires being in stanfrontend
          cd stanfrontend

          # ccomp doesn't compile down to object files, just asm
          ccomp -c tests/simple/simple.stan
          ccomp -c simple.s
          echo [DONE] simple.o

          ccomp -I. -c tests/simple/simple_prelude.c -lm
          echo [DONE] simple_prelude.o

          ccomp -I. -c tests/simple/simple_runtime.c -lm
          echo [DONE] simple_runtime.o

          ccomp -c stanlib.c -lm
          echo [DONE] stanlib.o

          ccomp stanlib.o simple_prelude.o simple.o simple_runtime.o -lm -o runit
          echo [DONE] compiled! run: ./stanfrontend/runit INT

          # ensure that binary has correct runtime execution
          export RUNIT_OUTPUT=\"$(./runit)\"

          if [[ -z "$(echo "$(./runit)" | grep error)" ]]; then
              echo [SUCCESS] ./runit compiled with output:
              echo $RUNIT_OUTPUT
          else
            echo [ERROR] ./runit fails at runtime with message:
            echo $RUNIT_OUTPUT
            exit 1
          fi

      - name: Run compiled binary
        run: |
          echo $PWD
          ./stanfrontend/runit 100

      - name: Build stanfrontend/tests/classics/coin_flip.stan
        run: |
          eval $(opam env);

          sudo make -j install

          # this is important for looking up ./Runtime.c file (see FIXME in printRuntimeFile)
          cd stanfrontend
          ccomp -c stanlib.c
          ccomp -c tests/classics/coin_flip.stan
          ccomp -c coin_flip.s
          ccomp -I. -c tests/classics/coin_flip_prelude.c
          ccomp -I. -c tests/classics/coin_flip_runtime.c
          ccomp stanlib.o coin_flip_prelude.o coin_flip.o coin_flip_runtime.o -lm -o runit

      - name: test that ccompstan script works on stanfrontend/tests/simple/simple.stan
        run: |
          eval $(opam env);

          sudo make -j install

          ./.bin/ccompstan stanfrontend/tests/simple/simple.stan
